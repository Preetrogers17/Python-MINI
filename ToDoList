import tkinter as tk
from tkinter import simpledialog, messagebox

tasks = []

# Main functions
def add_task():
    task = simpledialog.askstring("Add Task", "Enter Task Name:")
    if task:
        tasks.append(task)
        update_tasks()

def remove_task():
    if not tasks:
        messagebox.showinfo("Info", "No tasks to remove.")
        return
    index = task_listbox.curselection()
    if index:
        removed = tasks.pop(index[0])
        update_tasks()
        messagebox.showinfo("Removed", f"Task '{removed}' removed ‚ùå")
    else:
        messagebox.showwarning("Warning", "Select a task to remove.")

def show_all():
    update_tasks()

def prioritize_tasks():
    if not tasks:
        messagebox.showinfo("Info", "No tasks to prioritize.")
        return

    priority_window = tk.Toplevel(root)
    priority_window.configure(bg="#121212")
    priority_window.title("Prioritize Tasks")

    task_priorities = {}

    def save_priorities():
        for i in range(len(tasks)):
            try:
                pn = int(priority_entries[i].get())
                task_priorities[tasks[i]] = pn
            except ValueError:
                continue
        sorted_tasks = sorted(task_priorities.items(), key=lambda x: x[1])
        result = "\n".join([f"{task} ‚Üí Priority {prio}" for task, prio in sorted_tasks])
        messagebox.showinfo("Prioritized Tasks", result)
        priority_window.destroy()

    priority_entries = []
    for i, task in enumerate(tasks):
        tk.Label(priority_window, text=task, bg="#121212", fg="lime", font=("Courier", 10)).pack()
        entry = tk.Entry(priority_window, bg="#1e1e1e", fg="white", insertbackground="white")
        entry.pack(pady=2)
        priority_entries.append(entry)

    tk.Button(priority_window, text="Save Priorities", command=save_priorities, bg="lime", fg="black").pack(pady=10)

def add_bulk_tasks():
    try:
        count = int(simpledialog.askstring("Bulk Add", "How many tasks?"))
        for i in range(count):
            task = simpledialog.askstring("Task", f"Enter Task {i + 1}:")
            if task:
                tasks.append(task)
        update_tasks()
        messagebox.showinfo("Success", "All tasks added successfully ‚úÖ")
    except:
        pass

def update_tasks():
    task_listbox.delete(0, tk.END)
    for task in tasks:
        task_listbox.insert(tk.END, task)

# Setup GUI
root = tk.Tk()
root.title("ToDo List üìù")
root.geometry("400x500")
root.configure(bg="#121212")

tk.Label(root, text="ToDo List üêç", fg="lime", bg="#121212", font=("Courier", 16, "bold")).pack(pady=10)

task_listbox = tk.Listbox(root, bg="#1e1e1e", fg="white", font=("Courier", 12), selectbackground="lime", selectforeground="black")
task_listbox.pack(pady=10, fill=tk.BOTH, expand=True, padx=20)

btn_frame = tk.Frame(root, bg="green")
btn_frame.pack(pady=10)

buttons = [
    ("Add Task", add_task),
    ("Remove Task", remove_task),
    ("Show All", show_all),
    ("Prioritize", prioritize_tasks),
    ("Add Bulk", add_bulk_tasks),
    ("Exit", root.quit)
]

for text, cmd in buttons:
    tk.Button(btn_frame, text=text, command=cmd, bg="lime", fg="black", font=("Courier", 10), width=15).pack(pady=4)

root.mainloop()


#without ui code
from typing import List

# Shared list of tasks
List = []

# Show menu
def ToDo():
    print("\nHi! Let's make a ToDoList for today.....‚úîÔ∏è")
    print("1. Add Task üÜï")
    print("2. Remove Task or Mark Done ‚ùå")
    print("3. Show all Tasks üê¶‚Äçüî•")
    print("4. Prioritize Tasks üî∫")
    print("5. Add a number of Tasks at once <->")
    print("6. Exit üö™")

# Add one task
def AddTask():
    Task = input("Enter Task Name -> ")
    List.append(Task)
    print("Task Added Successfully ‚úÖ")

# Remove task by number
def RemoveTask():
    if len(List) == 0:
        print("No tasks to remove.")
        return
    All()
    index = int(input("Enter Task Number to remove -> ")) - 1
    if index >= 0 and index < len(List):
        removed = List.pop(index)
        print("Task '" + removed + "' removed ‚ùå")
    else:
        print("Invalid Task Number.")

# Show all tasks
def All():
    if len(List) == 0:
        print("No tasks added yet üì≠")
    else:
        print("\nYour Tasks:")
        for i in range(len(List)):
            print(str(i+1) + ". " + List[i])

# Prioritize tasks
def PD():
    if len(List) == 0:
        print("No tasks to prioritize.")
        return
    Prior = {}
    print("\nPriority ranges from number 1-10 (1 = Most Important) üî•")
    for i in range(len(List)):
        print(List[i])
        PN = int(input("Enter Priority Number -> "))
        Prior.update({List[i]: PN})
    print("\nPrioritized Tasks:")
    for task in sorted(Prior, key=Prior.get):
        print(task + " ‚Üí Priority " + str(Prior[task]))

# Add multiple tasks
def BulkTask():
    NoofTask = int(input("Enter number of tasks -> "))
    for i in range(NoofTask):
        task = input("Enter Task " + str(i+1) + " -> ")
        List.append(task)
    print("All tasks added successfully ‚úÖ")

# Handle user choices
def Choices():
    while True:
        ToDo()
        Choice = int(input("Choose from one of the options above -> "))
        if Choice == 1:
            AddTask()
        elif Choice == 2:
            RemoveTask()
        elif Choice == 3:
            All()
        elif Choice == 4:
            PD()
        elif Choice == 5:
            BulkTask()
        elif Choice == 6:
            print("Goodbye! Stay productive üòé")
            break
        else:
            print("Invalid option.")

# Run the app
Choices()

